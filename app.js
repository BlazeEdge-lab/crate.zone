const { VK } = require('vk-io');
let chatId;
if (!process.env.ACCESS_TOKEN) {
    console.log('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞. –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.')
    process.exit(0);
}
const vk = new VK({
    token: process.env.ACCESS_TOKEN
});
const { HearManager } = require('@vk-io/hear');
let userInfo;
let ignorePromo;
const tokens = [];
vk.api.users.get().then((res) => {
    userInfo = res[0];
})
vk.updates.on('message', async (ctx, next) => {
    if (ctx.peerId === -195809438 && ctx.text === 'üîπ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –∫–ª—é—á –ø–æ —Ç–∞–π–º–µ—Ä—É.') {
        vk.api.messages.send({peer_id: chatId, random_id: 0, message: '–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä'})
    }

    return next();
});

const hearManager = new HearManager();
 
vk.updates.on('message_new', hearManager.middleware);
 
hearManager.hear(/([a-z0-9]{4}-[a-z0-9]{4})/i, async (ctx) => {
    console.log(ctx.chatId);
    if (ignorePromo === ctx.$match[0] || process.env.PROMO_ID != ctx.chatId || ctx.$match[0] === '-') return;
    ignorePromo = ctx.$match[0];
    await vk.api.messages.send({peer_id: -195809438, random_id: 0, message: '–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥'});
    setTimeout(() => vk.api.messages.send({peer_id: -195809438, random_id: 0, message: ctx.$match[0]}), 2000)
});

vk.updates.on('message', async (ctx) => {
    if (ctx.text === '!–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' && ctx.senderId === userInfo.id) {
        chatId = ctx.peerId;
        ctx.reply('–¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤. :))))');
    }
})

vk.updates.start()
    .then(() => {
        console.log('–§–∞—Ä–º–∏–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.');
    })
    .catch((err) => {
        console.log('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞—Ä–º–∏–ª–∫–∏: ', err);
    })
